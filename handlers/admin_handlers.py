from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state

from filters.filters import IsAdmin, ExistProduct
from keyboards.reply_keyboards import admin_action_kb, cancel_kb, admin_kb
from keyboards.inline_keyboards import products_kb
from states import AddProductFSM, RemoveProductFSM
from aiogram.fsm.context import FSMContext
from lexicon import TYPE_BUTTONS

router = Router()

@router.message((F.text == "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üíª"), StateFilter(default_state), IsAdmin())
async def process_panel_command(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é üõ†", reply_markup=admin_action_kb)

@router.message(F.text == "–û—Ç–º–µ–Ω–∞ ‚ùå", StateFilter(default_state), IsAdmin())
@router.message(Command(commands="cancel"), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(text="–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É ‚ùå", reply_markup=admin_kb)

@router.message(F.text == "–û—Ç–º–µ–Ω–∞ ‚ùå", ~StateFilter(default_state), IsAdmin())
@router.message(Command(commands="cancel"), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã ‚úÖ", reply_markup=admin_kb)
    await state.clear()
    
@router.message(F.text == "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üü¢", StateFilter(default_state), IsAdmin())
async def process_add_product(message: Message, state: FSMContext):
        await message.answer(text="–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ üëú", reply_markup=products_kb)
        await state.set_state(AddProductFSM.type_order)

@router.callback_query(StateFilter(AddProductFSM.type_order), F.data.in_(["clothes", "sneakers", "accessories"]), IsAdmin())
async def process_type_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type=TYPE_BUTTONS[callback.data])
    await callback.message.delete()
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üñç", reply_markup=cancel_kb)
    await state.set_state(AddProductFSM.name_order)

@router.message(StateFilter(AddProductFSM.type_order), IsAdmin())
async def incorrect_type(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ ‚ùå", reply_markup=cancel_kb)

@router.message(StateFilter(AddProductFSM.name_order), IsAdmin(), lambda x: len(f'product:{x.text}'.encode()) <= 64)
async def process_name_sent(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üñç", reply_markup=cancel_kb)
    await state.set_state(AddProductFSM.description_order)

@router.message(StateFilter(AddProductFSM.name_order), IsAdmin())
async def incorrect_name(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚ùå", reply_markup=cancel_kb)

@router.message(StateFilter(AddProductFSM.description_order), lambda x: 1 <= len(x.text) <= 250, IsAdmin())
async def process_descr_sent(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä üñç", reply_markup=cancel_kb)
    await state.set_state(AddProductFSM.price_order)

@router.message(StateFilter(AddProductFSM.description_order), IsAdmin())
async def incorrect_descr(message: Message):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 250 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå", reply_markup=cancel_kb)

@router.message(StateFilter(AddProductFSM.price_order), lambda x: x.text.isdigit(), IsAdmin())
async def process_price_sent(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ —Ç–æ–≤–∞—Ä üì∑", reply_markup=cancel_kb)
    await state.set_state(AddProductFSM.photo_order)

@router.message(StateFilter(AddProductFSM.price_order), IsAdmin())
async def incorrect_price(message: Message):
    await message.answer(text="–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Ü–µ–Ω–∞ ‚ùå", reply_markup=cancel_kb)

@router.message(StateFilter(AddProductFSM.photo_order), F.photo[-1].as_("largest_photo"), IsAdmin())
async def process_photo_sent(message: Message, state: FSMContext, largest_photo: PhotoSize, database):
    try:
        await state.update_data(
            photo_unique_id=largest_photo.file_unique_id,
            photo_id=largest_photo.file_id,
        )

        response = await state.get_data()
        database.insert_product(response)

        await state.clear()
        await message.answer(text="–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=admin_kb)
    except:
        await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ‚ùå", reply_markup=admin_kb)
        await state.clear()


@router.message(StateFilter(AddProductFSM.photo_order), IsAdmin())
async def incorrect_photo(message: Message):
    await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚ùå", reply_markup=cancel_kb)

@router.message(F.text == "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üî¥", StateFilter(default_state), IsAdmin())
async def process_remove_product(message: Message, state: FSMContext):
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è üñç", reply_markup=cancel_kb)
        await state.set_state(RemoveProductFSM.name_order)

@router.message(StateFilter(RemoveProductFSM.name_order), IsAdmin(), ExistProduct())
async def correct_product(message: Message, state: FSMContext, database):
    name = message.text
    try:
        database.remove_product(name)
        await message.answer(text="–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ", reply_markup=admin_kb)
        await state.clear()
    except:
        await message.answer(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚ùå", reply_markup=admin_kb)
        await state.clear()

@router.message(StateFilter(RemoveProductFSM.name_order), IsAdmin())
async def incorrect_product(message: Message):
    await message.answer(text="–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ‚ùå")
